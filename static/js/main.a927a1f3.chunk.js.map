{"version":3,"sources":["assets/backronyms.jpg","Word.js","Frequency.js","firebase.js","DisplayB.js","Loader.js","Search.js","UserCollection.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Word","props","className","onClick","reject","accept","word","Frequency","state","frequencyAverage","arr","freqAvg","this","frequency","reduce","a","b","length","setState","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayB","remove","dbKey","database","ref","child","on","snapshot","data","val","update","key","push","map","i","backronym","id","Loader","Search","apiCharacters","e","preventDefault","inputCharacters","input","inputIndex","backronymIndex","rejectCounter","loading","apiCall","letter","axios","url","method","responseType","params","sp","lc","md","then","firstAPICallResult","apiWords","isGenerated","secondAPICallResult","handleChange","target","value","copyBackronym","copyFrequency","wordFrequency","tags","frequencyNum","parseFloat","substring","dbRef","backronymObject","join","document","getElementById","scrollIntoView","behavior","handleRedo","handleSave","displayArray","action","onSubmit","htmlFor","placeholder","type","pattern","title","required","onChange","index","userCollection","item","Login","class","tabIndex","to","app","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a927a1f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backronyms.7fa96c9a.jpg\";","import React from 'react';\n\nconst Word = (props) => {\n    return (\n        //button to trigger the accept and reject functions passed as prop on click\n        <div className=\"word\">\n             <div>\n                <button className=\"chooseWord primeButton\" onClick={props.reject}>Reject</button>\n                <button className=\"chooseWord secondarySButton\" onClick={props.accept}>Accept</button>\n            </div>\n            {/* display the suggested word */}\n            <div>\n                <h2>{props.word}</h2>\n            </div>\n        </div>\n    );\n}\n\nexport default Word;","import React, { Component } from 'react';\n\nclass Frequency extends Component {\n    constructor() {\n        super();\n        this.state = {\n            frequencyAverage: 0\n        }\n    }\n    //calculate the sum of the ngram frequencies and set the average\n    componentDidMount() {\n        const arrAvg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n        const freqAvg = arrAvg(this.props.frequency);\n        this.setState({frequencyAverage: freqAvg});\n    }\n    render() {\n        return(\n            // display the ngram frequency\n            <div className=\"frequency\">\n                <h5>This backronym frequency is:</h5>\n                <p><span>{this.state.frequencyAverage}</span> out of a Million</p>\n            </div>\n        )\n    }\n}\n\nexport default Frequency;","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD09HbLD6nsxKX0n6NKDf8NyZru7CTrxng\",\n  authDomain: \"backronym-generator.firebaseapp.com\",\n  databaseURL: \"https://backronym-generator.firebaseio.com\",\n  projectId: \"backronym-generator\",\n  storageBucket: \"backronym-generator.appspot.com\",\n  messagingSenderId: \"125883152942\",\n  appId: \"1:125883152942:web:d2dd801b6d1586c4d43dbf\",\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, {Component} from 'react';\nimport firebase from \"./firebase\";\n\nclass DisplayB extends Component {\n    constructor(){\n        super();\n        this.state = {\n            database: []\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref('displayBoard');\n        dbRef.on(\"value\", (snapshot) => {\n          const data = snapshot.val();\n          const update = [];\n          for (let key in data) {\n            update.push({ key: key, data: data[key] });\n          }\n          this.setState({\n            database: update,\n          });\n        });\n      }\n\n\n    remove = (dbKey) => {\n    const dbRefToRead = firebase.database().ref('displayBoard');\n    dbRefToRead.child(dbKey).remove();\n    }\n\n    render(){\n        return (\n            <div className=\"display\">\n                <div className=\"displayGap\">\n                    <ul>\n                        \n                    {\n                        this.state.database.map((i) => {\n                        return <li key={i.key} >\n                                    <button onClick={() => this.remove(i.key)}><span>&times;</span></button>\n                                    <h6>{`${i.data.word}:`}</h6>\n                                    <p>{i.data.backronym}</p>\n                                </li>\n                        })\n                    }\n                    <a id=\"display\"></a>\n                    </ul>\n                </div>\n            </div>      \n        )\n    }\n}\n\n\nexport default DisplayB;","import React from 'react';\n\nconst Loader = () => {\n  return(\n    <div className=\"loader\">\n      <div className=\"loadingScreen\"></div>\n      <h1>Loading...</h1>\n    </div>\n  );\n}\n\nexport default Loader;","import React, { Component } from \"react\";\nimport Word from \"./Word\";\nimport Frequency from './Frequency';\nimport DisplayB from './DisplayB';\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport Loader from './Loader';\n\n\nclass Search extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\", //user input, initially set to an empty string\n      inputCharacters: [], //input string spread out\n      inputIndex: 0, //tracking the index of inputCharacters\n      apiWords: [], //words that are returned from the API\n      backronym: [], //an array of user accepted words\n      backronymIndex: -1, //index of last accepted word in the backronym array\n      frequency: [], //ngram frequency of each word in the backronym array\n      displayArray: [],\n      rejectCounter: 0, //index to loop through API call result array\n      loading: false,\n      isGenerated: false, //API results flag\n    };\n  }\n  //////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //FUNCTIONS\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //////////////////////////////////////////////\n\n  //the first API call and resetting states\n  apiCharacters = (e) => {\n    e.preventDefault();\n    this.setState(\n      {\n        inputCharacters: [...this.state.input],\n        input: \"\",\n        inputIndex: 0,\n        backronym: [],\n        backronymIndex: -1,\n        rejectCounter: 0,\n        loading: true,\n        frequency: [],\n      },\n      () => {\n        this.apiCall(this.state.inputCharacters[0]);\n      }\n    );\n  };\n\n  //This function can call the API upto two times:\n  // - the first time passing a \"starting letter\" as well as a word\n  //- the second time passing just a \"starting letter\"\n  // - if the first api call returns no \"related words\" in the results, we make the second API call\n  apiCall = (letter, word) => {\n    axios({\n      url: \"https://api.datamuse.com/words?\",\n      method: \"GET\",\n      responseType: \"json\",\n      params: {\n        sp: `${letter}*`,\n        lc: word,\n        md: \"f\",\n      },\n    }).then((firstAPICallResult) => {\n      const apiWords = firstAPICallResult.data;\n      if (apiWords.length > 0) {\n        this.setState({ apiWords, isGenerated: true , loading: false });\n      } else {\n        axios({\n          url: \"https://api.datamuse.com/words?\",\n          method: \"GET\",\n          responseType: \"json\",\n          params: {\n            sp: `${letter}*`,\n            md: \"f\",\n          },\n        }).then((secondAPICallResult) => {\n          const apiWords = secondAPICallResult.data;\n          if (apiWords.length > 0) {\n            this.setState({ apiWords, isGenerated: true , loading: false });\n          }\n        });\n      }\n    });\n  };\n\n  //saving the user input value\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value,\n    });\n  };\n\n  //function to handle when user accepts a word for the backronym\n  accept = () => {\n    //pushing the user selected word to a copy of the backronym array\n    const copyBackronym = this.state.backronym; //array of accepted words\n    copyBackronym.push(this.state.apiWords[this.state.rejectCounter].word);\n    //parsing the ngram frequecny value from string to a float in order to do calculations\n    const copyFrequency = this.state.frequency;\n    const wordFrequency = this.state.apiWords[this.state.rejectCounter].tags[0];\n    const frequencyNum = parseFloat(wordFrequency.substring(2));\n    copyFrequency.push(frequencyNum);\n\n    //updating state and making an API call with the next input letter and the saved backronym word \n    this.setState(\n      {\n        backronym: copyBackronym,\n        frequency: copyFrequency,\n        rejectCounter: 0,\n        backronymIndex: this.state.backronymIndex + 1,\n        inputIndex: this.state.inputIndex + 1,\n      },\n      () => {\n        this.apiCall(\n          this.state.inputCharacters[this.state.inputIndex], //\"r\",\"u\"\n          this.state.backronym[this.state.backronymIndex] //to,rush\n        );\n        if (this.state.backronym.length === this.state.inputCharacters.length) {\n          const dbRef = firebase.database().ref('displayBoard');\n          const backronymObject = {\n            word: this.state.inputCharacters.join(\"\"),\n            backronym: this.state.backronym.join(\" \"),\n          };\n          dbRef.push(backronymObject);\n          const display = document.getElementById('display');\n          display.scrollIntoView({ behavior: \"smooth\" })\n        }\n      } //making the API call only after state is set\n    );\n  };\n\n  //function to handle when the user rejects a word for the backronym\n  reject = () => {\n    if (this.state.rejectCounter === this.state.apiWords.length - 1) {\n      this.setState({ rejectCounter: 0 });\n    } else {\n      this.setState({ rejectCounter: this.state.rejectCounter + 1 }); //loop to the next word in the array\n    }\n  };\n\n  //making an API call with the first of the same input letter if the user chooses to redo the backronym\n  handleRedo = () => {\n    this.setState(\n      {\n        inputIndex: 0,\n        backronym: [],\n        backronymIndex: -1,\n        rejectCounter: 0,\n      },\n      () => {\n        this.apiCall(this.state.inputCharacters[this.state.inputIndex]);\n      }\n    );\n  };\n\n  //saving the backronyms to firebase on Save for the usersCollection\n  handleSave = () => {\n    const dbRef = firebase.database().ref(\"userCollection\");\n    const backronymObject = {\n      word: this.state.inputCharacters.join(\"\"),\n      backronym: this.state.backronym.join(\" \"),\n    };\n    dbRef.push(backronymObject);\n  };\n\n  //////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //RENDER\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //////////////////////////////////////////////\n  render() {\n    return (\n      <div className=\"search gridParent\">\n        <div className=\"controls\">\n          <div className=\"controlsGap\">\n            <h1>Backronym</h1>\n            {/* user input form */}\n            <form action=\"submit\" onSubmit={(e) => this.apiCharacters(e)}>\n              <label htmlFor=\"input\">Enter a word</label>\n              <input\n                placeholder=\"eg: bird\"\n                type=\"text\"\n                value={this.state.input}\n                pattern=\"^[A-Za-z]{3,10}$\"\n                title=\"our message here\"\n                required\n                id=\"input\"\n                onChange={this.handleChange}\n              ></input>\n              <button type=\"submit\" className=\"generate lightButton\">Generate</button>\n            </form>\n            {/* buttons to redo and save */}\n            <button\n              className=\"secondaryControlButtons primeButton\"\n              onClick={() => this.handleRedo()}\n            >\n              Redo\n            </button>\n            <button\n              className=\"secondaryControlButtons secondarySButton\"\n              onClick={() => this.handleSave()}\n            >\n              Save\n            </button>\n          </div>\n        </div>\n        {/* Displaying the results */}\n        <div className=\"results\">\n            {/* show words from the API results until the user accepts backronyms for all letters and then pass the ngram frequencies as props to the Frequency component */}\n            <div className=\"resultsGap\">\n                {\n                !this.state.isGenerated\n                ? null\n                : this.state.backronym.length < this.state.inputCharacters.length\n                    ?<Word\n                        word={this.state.apiWords[this.state.rejectCounter].word}\n                        accept={this.accept}\n                        reject={this.reject}\n                    />\n                    : <Frequency frequency={this.state.frequency}/>\n                }\n\n                {\n                  this.state.loading \n                  ? <Loader />\n                  : <ul className=\"words\">\n                      {\n                        //  display the user accepted backronym word \n                        this.state.backronym.map( (word, index) => {\n                              return <li key={index}>{word}</li>\n                          })\n                      }\n                    </ul>\n                }\n\n                \n                    \n                    </div>\n                    <DisplayB />\n                \n            </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\n//This Component renders the user's collection of backronyms\nclass userCollection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      database: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref(\"userCollection\");\n    dbRef.on(\"value\", (snapshot) => {\n      const data = snapshot.val();\n      const update = [];\n      //convers the database (JSON) into an array\n      for (let key in data) {\n        update.push({ key: key, data: data[key] });\n      }\n      this.setState({\n        database: update,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"gridParent\">\n        <div className=\"userCollection\">\n          <ul>\n            {this.state.database.map((item) => {\n              return (\n                <li>\n                  <span>{item.data.word}</span>\n                  <p>{item.data.backronym}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default userCollection;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport backronyms from './assets/backronyms.jpg';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div class=\"gridParent\">\n                <div className=\"login\">\n                    <Link tabIndex=\"0\" className=\"lightButton\" to=\"/backronym/generate\">START</Link>\n                </div>\n                <div className=\"hero\">\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React, { Component } from \"react\";\nimport Search from \"./Search\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { render } from \"@testing-library/react\";\nimport userCollection from \"./UserCollection\";\nimport Login from \"./Login\";\n\n// Make an input and submit button on \"search\" component\n//- store input value in state\n//- turn input value into array of characters using spread operator\n//- set min character count = 4, max = 10, no space, no special characters\n\n//sub Component\n//- on submit, call API for the first letter\n//- when the user keeps the first word, we make another API call for the second letter based on the first word they choose\n//- make as many calls as letters in the input, save each word to an array\n//- .map API return on page\n\nclass app extends Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/backronym\" component={Login} />\n        <Route path=\"/backronym/generate\" component={Search} />\n        <Route path=\"/userCollection\" component={userCollection} />\n      </Router>\n    );\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}