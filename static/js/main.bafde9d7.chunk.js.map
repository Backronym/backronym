{"version":3,"sources":["Word.js","Frequency.js","firebase.js","DisplayB.js","UserCollection.js","Loader.js","Search.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","className","disabled","pause","onClick","reject","accept","word","Frequency","state","frequencyAverage","arr","freqAvg","Math","round","this","frequency","reduce","a","b","length","setState","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayB","remove","dbKey","database","ref","child","on","snapshot","data","val","update","key","push","map","i","backronym","id","UserCollection","filter","item","email","userEmail","Loader","Search","randomizeArray","array","j","floor","random","apiCharacters","e","preventDefault","inputCharacters","input","inputIndex","backronymIndex","rejectCounter","loading","apiCall","letter","axios","url","method","responseType","params","sp","lc","md","then","firstAPICallResult","apiWords","isGenerated","acceptPause","secondAPICallResult","handleChange","target","value","copyBackronym","copyFrequency","wordFrequency","tags","frequencyNum","parseFloat","substring","dbRef","backronymObject","join","document","getElementById","scrollIntoView","behavior","handleRedo","saved","displayOrCollection","handleSave","reverseOfDisplayOrCollection","logOut","action","onSubmit","htmlFor","placeholder","type","pattern","title","required","onChange","href","index","Login","logIn","guest","howToggle","whatToggle","show","showWhat","App","login","auth","provider","GoogleAuthProvider","signInWithPopup","result","user","console","log","logout","signOut","signInAnonymously","catch","copyOfShow","copyOfShowWhat","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bafde9d7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Word = (props) => {\n  return (\n    //button to trigger the accept and reject functions passed as prop on click\n    <div className=\"word\">\n      <div>\n        <button\n          className=\"chooseWord primeButton\"\n          disabled={props.pause}\n          onClick={props.reject}\n        >\n          Reject\n        </button>\n        <button\n          className=\"chooseWord secondarySButton\"\n          disabled={props.pause}\n          onClick={props.accept}\n        >\n          Accept\n        </button>\n      </div>\n      {/* display the suggested word */}\n      <div>\n        <h2>{props.word}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Word;\n","import React, { Component } from \"react\";\n\nclass Frequency extends Component {\n  constructor() {\n    super();\n    this.state = {\n      frequencyAverage: 0,\n    };\n  }\n  //calculate the sum of the ngram frequencies and set the average\n  componentDidMount() {\n    const arrAvg = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\n    const freqAvg = Math.round(arrAvg(this.props.frequency));\n    this.setState({ frequencyAverage: freqAvg });\n  }\n  render() {\n    return (\n      // display the ngram frequency\n      <div className=\"frequency\">\n        <h5>This backronym frequency is:</h5>\n        <p>\n          <span>{this.state.frequencyAverage}</span> (occurrences per million\n          words in English text)\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Frequency;\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD09HbLD6nsxKX0n6NKDf8NyZru7CTrxng\",\n  authDomain: \"backronym-generator.firebaseapp.com\",\n  databaseURL: \"https://backronym-generator.firebaseio.com\",\n  projectId: \"backronym-generator\",\n  storageBucket: \"backronym-generator.appspot.com\",\n  messagingSenderId: \"125883152942\",\n  appId: \"1:125883152942:web:d2dd801b6d1586c4d43dbf\",\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass DisplayB extends Component {\n  constructor() {\n    super();\n    this.state = {\n      database: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref(\"displayBoard\");\n    dbRef.on(\"value\", (snapshot) => {\n      const data = snapshot.val();\n      const update = [];\n      for (let key in data) {\n        update.push({ key: key, data: data[key] });\n      }\n      this.setState({\n        database: update,\n      });\n    });\n  }\n\n  remove = (dbKey) => {\n    const dbRefToRead = firebase.database().ref(\"displayBoard\");\n    dbRefToRead.child(dbKey).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"display\">\n        <div className=\"displayGap\">\n          <ul>\n            {this.state.database.map((i) => {\n              return (\n                <li key={i.key}>\n                  <button onClick={() => this.remove(i.key)}>\n                    <span>&times;</span>\n                  </button>\n                  <h6>{`${i.data.word}:`}</h6>\n                  <p>{i.data.backronym}</p>\n                </li>\n              );\n            })}\n            <p id=\"display\"></p>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DisplayB;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\n//This Component renders the user's collection of backronyms\nclass UserCollection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      database: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref(\"userCollection\");\n    dbRef.on(\"value\", (snapshot) => {\n      const data = snapshot.val();\n      const update = [];\n      //converts the database (JSON) into an array\n      for (let key in data) {\n        update.push({ key: key, data: data[key] });\n      }\n      this.setState({\n        database: update,\n      });\n    });\n  }\n\n  remove = (dbKey) => {\n    const dbRefToRead = firebase.database().ref(\"userCollection\");\n    dbRefToRead.child(dbKey).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"userCollection display\">\n        <div className=\"displayGap\">\n          <ul>\n            {this.state.database\n              .filter((item) => item.data.email === this.props.userEmail)\n              .map((item) => {\n                return (\n                  <li key={item.key}>\n                    <button onClick={() => this.remove(item.key)}>\n                      <span>&times;</span>\n                    </button>\n                    <h6>{item.data.word}</h6>\n                    <p>{item.data.backronym}</p>\n                  </li>\n                );\n              })}\n          </ul>\n          <p id=\"display\"></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserCollection;\n","import React from 'react';\n\nconst Loader = () => {\n  return(\n    <div className=\"loader\">\n      <div className=\"loadingScreen\"></div>\n      <h4>Loading...</h4>\n    </div>\n  );\n}\n\nexport default Loader;","import React, { Component } from \"react\";\nimport Word from \"./Word\";\nimport Frequency from \"./Frequency\";\nimport DisplayB from \"./DisplayB\";\nimport UserCollection from \"./UserCollection\";\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport Loader from \"./Loader\";\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\", //user input, initially set to an empty string\n      inputCharacters: [], //input string spread out\n      inputIndex: 0, //tracking the index of inputCharacters\n      apiWords: [], //words that are returned from the API\n      backronym: [], //an array of user accepted words\n      backronymIndex: -1, //index of last accepted word in the backronym array\n      frequency: [], //ngram frequency of each word in the backronym array\n      rejectCounter: 0, //index to loop through API call result array\n      loading: false, //API loading state flag\n      isGenerated: false, //API results flag\n      saved: false, //flag to disable multiple saves\n      acceptPause: false, //flag to cool down the accept button\n    };\n  }\n  //////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //FUNCTIONS\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //////////////////////////////////////////////\n\n  //randomizing the returned apiWords array using the Fisher–Yates shuffle algorithm\n  randomizeArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  //the first API call and resetting states\n  apiCharacters = (e) => {\n    e.preventDefault();\n    this.setState(\n      {\n        inputCharacters: [...this.state.input],\n        input: \"\",\n        inputIndex: 0,\n        backronym: [],\n        backronymIndex: -1,\n        rejectCounter: 0,\n        loading: true,\n        frequency: [],\n      },\n      () => {\n        this.apiCall(this.state.inputCharacters[0]);\n      }\n    );\n  };\n\n  //This function can call the API upto two times:\n  // - the first time passing a \"starting letter\" as well as a word\n  //- the second time passing just a \"starting letter\"\n  // - if the first api call returns no \"related words\" in the results, we make the second API call\n  apiCall = (letter, word) => {\n    axios({\n      url: \"https://api.datamuse.com/words?\",\n      method: \"GET\",\n      responseType: \"json\",\n      params: {\n        sp: `${letter}*`,\n        lc: word,\n        md: \"f\",\n      },\n    }).then((firstAPICallResult) => {\n      const apiWords = firstAPICallResult.data;\n      if (apiWords.length > 4) {\n        this.randomizeArray(apiWords);\n        this.setState({\n          apiWords,\n          isGenerated: true,\n          loading: false,\n          acceptPause: false,\n        });\n      } else {\n        axios({\n          url: \"https://api.datamuse.com/words?\",\n          method: \"GET\",\n          responseType: \"json\",\n          params: {\n            sp: `${letter}*`,\n            md: \"f\",\n          },\n        }).then((secondAPICallResult) => {\n          const apiWords = secondAPICallResult.data;\n          if (apiWords.length > 4) {\n            this.randomizeArray(apiWords);\n            this.setState({\n              apiWords,\n              isGenerated: true,\n              loading: false,\n              acceptPause: false,\n            });\n          }\n        });\n      }\n    });\n  };\n\n  //saving the user input value\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value,\n    });\n  };\n\n  //function to handle when user accepts a word for the backronym\n  accept = () => {\n    //pushing the user selected word to a copy of the backronym array\n    const copyBackronym = this.state.backronym; //array of accepted words\n    copyBackronym.push(this.state.apiWords[this.state.rejectCounter].word);\n    //parsing the ngram frequecny value from string to a float in order to do calculations\n    const copyFrequency = this.state.frequency;\n    const wordFrequency = this.state.apiWords[this.state.rejectCounter].tags[0];\n    const frequencyNum = parseFloat(wordFrequency.substring(2));\n    copyFrequency.push(frequencyNum);\n\n    //updating state and making an API call with the next input letter and the saved backronym word\n    this.setState(\n      {\n        backronym: copyBackronym,\n        frequency: copyFrequency,\n        rejectCounter: 0,\n        backronymIndex: this.state.backronymIndex + 1,\n        inputIndex: this.state.inputIndex + 1,\n        acceptPause: true,\n      },\n      () => {\n        this.apiCall(\n          this.state.inputCharacters[this.state.inputIndex], //\"r\",\"u\"\n          this.state.backronym[this.state.backronymIndex] //to,rush\n        );\n        if (this.state.backronym.length === this.state.inputCharacters.length) {\n          const dbRef = firebase.database().ref(\"displayBoard\");\n          const backronymObject = {\n            word: this.state.inputCharacters.join(\"\"),\n            backronym: this.state.backronym.join(\" \"),\n          };\n          dbRef.push(backronymObject);\n\n          const display = document.getElementById(\"display\");\n          display.scrollIntoView({ behavior: \"smooth\" });\n        }\n      } //making the API call only after state is set\n    );\n  };\n\n  //function to handle when the user rejects a word for the backronym\n  reject = () => {\n    if (this.state.rejectCounter === this.state.apiWords.length - 1) {\n      this.setState({ rejectCounter: 0 });\n    } else {\n      this.setState({ rejectCounter: this.state.rejectCounter + 1 }); //loop to the next word in the array\n    }\n  };\n\n  //making an API call with the first of the same input letter if the user chooses to redo the backronym\n  handleRedo = () => {\n    this.setState(\n      {\n        inputIndex: 0,\n        backronym: [],\n        backronymIndex: -1,\n        rejectCounter: 0,\n        frequency: [],\n        saved: false,\n        displayOrCollection: true,\n      },\n      () => {\n        this.apiCall(this.state.inputCharacters[this.state.inputIndex]);\n      }\n    );\n  };\n\n  //saving the backronyms to firebase on Save for the usersCollection\n  handleSave = () => {\n    if (this.state.saved === false && this.state.inputCharacters.length !== 0) {\n      const dbRef = firebase.database().ref(\"userCollection\");\n      const backronymObject = {\n        word: this.state.inputCharacters.join(\"\"),\n        backronym: this.state.backronym.join(\" \"),\n        //associating saved backronym with the logged in user's email\n        email: this.props.userEmail,\n      };\n      dbRef.push(backronymObject);\n    }\n    this.setState({\n      saved: true,\n    });\n  };\n\n  displayOrCollection = () => {\n    const reverseOfDisplayOrCollection = !this.state.displayOrCollection;\n    this.setState({\n      displayOrCollection: reverseOfDisplayOrCollection,\n    });\n  };\n\n  //////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //RENDER\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //////////////////////////////////////////////\n  render() {\n    return (\n      <div className=\"search gridParent\">\n        <div className=\"controls\">\n          <div className=\"controlsGap\">\n            <button\n              className=\"authButton primeButton\"\n              onClick={this.props.logOut}\n            >\n              Log Out\n            </button>\n            <h3>Backronym</h3>\n            {/* user input form */}\n            <form action=\"submit\" onSubmit={(e) => this.apiCharacters(e)}>\n              <label htmlFor=\"input\">Enter a word</label>\n              <input\n                placeholder=\"eg: bird\"\n                type=\"text\"\n                value={this.state.input}\n                pattern=\"^[A-Za-z]{3,10}$\"\n                title=\"Enter a word between 3 and 10 characters in length\"\n                required\n                id=\"input\"\n                onChange={this.handleChange}\n              ></input>\n              <button type=\"submit\" className=\"generate lightButton\">\n                Generate\n              </button>\n            </form>\n            {/* buttons to redo and save */}\n            <button\n              className=\"secondaryControlButtons primeButton\"\n              onClick={() => this.handleRedo()}\n            >\n              Redo\n            </button>\n            <button\n              disabled={\n                this.state.backronym.length <\n                this.state.inputCharacters.length &&\n                this.state.backronym.length > 0\n              }\n              className=\"secondaryControlButtons secondarySButton\"\n              onClick={() => this.handleSave()}\n            >\n              Save\n            </button>\n            <footer>\n              <p>Copyright &copy; 2020:</p>\n              <a href=\"https://meganrantz.io/\">Megan</a>\n              <a href=\"http://debyucodes.com/\">Deb</a>\n              <a href=\"http://twitter.com/alexorer\">Ashwin</a>\n              <a href=\"https://rahatrahman.com/\">Rahat</a>\n            </footer>\n          </div>\n        </div>\n        {/* Displaying the results */}\n        <div className=\"results\">\n          {/* show words from the API results until the user accepts backronyms for all letters and then pass the ngram frequencies as props to the Frequency component */}\n          <div className=\"resultsGap\">\n            {!this.state.isGenerated ? null : this.state.backronym.length <\n              this.state.inputCharacters.length ? (\n                <Word\n                  word={this.state.apiWords[this.state.rejectCounter].word}\n                  accept={this.accept}\n                  reject={this.reject}\n                  pause={this.state.acceptPause}\n                />\n              ) : (\n                <Frequency frequency={this.state.frequency} />\n              )}\n\n            {this.state.loading ? (\n              <Loader />\n            ) : (\n                <ul className=\"words\">\n                  {\n                    //  display the user accepted backronym word\n                    this.state.backronym.map((word, index) => {\n                      return <li key={index}>{word}</li>;\n                    })\n                  }\n                </ul>\n              )}\n            <div className=\"collectionButtons\">\n              {!this.state.displayOrCollection\n                ? (<button className=\"collection primeButton\" onClick={() => this.displayOrCollection()}\n                >My Collection</button>)\n                : (<button className=\"collection secondarySButton\" onClick={() => this.displayOrCollection()}\n                >Recent</button>\n                )}\n            </div>\n          </div>\n          {!this.state.displayOrCollection ? (\n            <DisplayB />\n          ) : (\n              <UserCollection userEmail={this.props.userEmail} />\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div className=\"gridParent\">\n                <div className=\"login\">\n                    <div className=\"controlsGap\">\n                        <h1>BACKRONYM</h1>\n                        <button className=\"authButton secondarySButton\" onClick={this.props.logIn}>Log In</button>\n                        <button className=\"authButton lightButton\" onClick={this.props.guest}>Guest</button>\n                        <button className=\"instructionButton\" onClick={this.props.howToggle}>How To Use</button>\n                        <button className=\"instructionButton\" onClick={this.props.whatToggle}>What is a Backronym?</button>\n                        <footer>\n                            <p>Copyright &copy; 2020:</p>\n                            <a href=\"https://meganrantz.io/\">Megan</a>\n                            <a href=\"http://debyucodes.com/\">Deb</a>\n                            <a href=\"http://twitter.com/alexorer\">Ashwin</a>\n                            <a href=\"https://rahatrahman.com/\">Rahat</a>\n                        </footer>\n                    </div>\n                </div>\n                <div className=\"hero\">\n                    {\n                        this.props.show\n                            ? false\n                            : \n                            <div className=\"overlay howOverlay\">\n                              <h2>How to use</h2>\n                              <div>\n                              Welcome to the Backronym Generator. Log in to start generating your unique backronyms by typing in an <span>input word</span> of your choice. Accept or reject the randomized word generated for the first letter of your word. Reject for another randomized word to be generated. Once youve accepted the first word for the first letter. Another word will be generated for the second letter of your <span>input word</span> based on the meaning of the first word you chose.\n                              </div>\n                            </div>\n                    }\n                    {\n                        this.props.showWhat\n                            ? false\n                            : \n                            <div className=\"overlay whatOverlay\">\n                            <h2>What is a backronym?</h2>\n                            <div>\n                                A backronym is an existing word turned into an acronym by creating an apt phrase whose initial letters match with the word, as to help remember it or offer a theory of its origin. For example: our backronym for <span>JUNO</span> is <span>J</span>oint <span>U</span>p <span>N</span>atural <span>O</span>ne.\n                            </div>\n                    </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React, { Component } from \"react\";\nimport Search from \"./Search\";\nimport Login from \"./Login\";\nimport \"./App.css\";\nimport firebase from \"./firebase\";\n\n// Make an input and submit button on \"search\" component\n//- store input value in state\n//- turn input value into array of characters using spread operator\n//- set min character count = 4, max = 10, no space, no special characters\n\n//sub Component\n//- on submit, call API for the first letter\n//- when the user keeps the first word, we make another API call for the second letter based on the first word they choose\n//- make as many calls as letters in the input, save each word to an array\n//- .map API return on page\n\nclass App extends Component {\n    constructor() {\n    super();\n    this.state = {\n      user: null,\n      email: null,\n      show: true,\n      showWhat: true,\n    };\n  }\n\n  componentDidMount() {\n    const auth = firebase.auth();\n\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        const userEmail = user.email ? user.email : \"anon@anon.com\";\n        this.setState({ user, email: userEmail });\n      }\n    });\n  }\n\n  //LOGIN FUNCTION\n  login = () => {\n    const auth = firebase.auth();\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    auth.signInWithPopup(provider).then((result) => {\n      const user = result.user;\n      this.setState({ user, email: user.email });\n      console.log(\"setting email on login\");\n      console.log(this.state.email);\n    });\n  };\n\n  // LOGOUT FUNCTION\n  logout = () => {\n    const auth = firebase.auth();\n\n    auth.signOut().then(() => {\n      this.setState({\n        user: null,\n      });\n    });\n  };\n\n  // GUEST FUNCTION\n  guest = () => {\n    const auth = firebase.auth();\n    \n    auth.signInAnonymously().catch(() => {\n      this.setState ({\n        email: `anon@anon.com`,\n      })\n    })\n  }\n\n  // INSTRUCTION\n  howToggle = () => {\n    const copyOfShow = !this.state.show;\n    \n    this.setState({\n      show: copyOfShow,\n    })\n  }\n\n  whatToggle = () => {\n    const copyOfShowWhat = !this.state.showWhat;\n\n    this.setState({\n      showWhat: copyOfShowWhat,\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"app\">\n        {\n          this.state.user \n          ? (<Search logOut={this.logout} userEmail={this.state.email} />) \n          : (<Login logIn={this.login} guest={this.guest} howToggle={this.howToggle} show={this.state.show} whatToggle={this.whatToggle} showWhat={this.state.showWhat} />)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}